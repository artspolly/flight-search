{"version":3,"sources":["../react_components/PaginationBoxView.js"],"names":["PaginationBoxView","props","handlePreviousPage","selected","state","evt","preventDefault","returnValue","handlePageSelected","handleNextPage","pageCount","setState","callCallback","selectedItem","onPageChange","pagination","items","pageRangeDisplayed","marginPagesDisplayed","breakLabel","breakClassName","index","getPageElement","leftSide","rightSide","page","breakView","createPageView","keys","Object","breakLabelKey","length","breakLabelValue","initialPage","forcePage","disableInitialCallback","nextProps","pageIndex","hrefBuilder","pageClassName","pageLinkClassName","activeClassName","extraAriaContext","bind","disabledClassName","previousClassName","nextClassName","containerClassName","previousLinkClassName","previousLabel","nextLinkClassName","nextLabel","disabled","previousClasses","nextClasses","propTypes","number","isRequired","node","func","bool","string","defaultProps"],"mappings":"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","file":"PaginationBoxView.js","sourcesContent":["'use strict';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport createFragment from 'react-addons-create-fragment';\nimport PageView from './PageView';\nimport BreakView from './BreakView';\n\n\nexport default class PaginationBoxView extends Component {\n  static propTypes = {\n    pageCount             : PropTypes.number.isRequired,\n    pageRangeDisplayed    : PropTypes.number.isRequired,\n    marginPagesDisplayed  : PropTypes.number.isRequired,\n    previousLabel         : PropTypes.node,\n    nextLabel             : PropTypes.node,\n    breakLabel            : PropTypes.node,\n    hrefBuilder           : PropTypes.func,\n    onPageChange          : PropTypes.func,\n    initialPage           : PropTypes.number,\n    forcePage             : PropTypes.number,\n    disableInitialCallback: PropTypes.bool,\n    containerClassName    : PropTypes.string,\n    pageClassName         : PropTypes.string,\n    pageLinkClassName     : PropTypes.string,\n    activeClassName       : PropTypes.string,\n    previousClassName     : PropTypes.string,\n    nextClassName         : PropTypes.string,\n    previousLinkClassName : PropTypes.string,\n    nextLinkClassName     : PropTypes.string,\n    disabledClassName     : PropTypes.string,\n    breakClassName        : PropTypes.string\n  };\n\n  static defaultProps = {\n    pageCount             : 10,\n    pageRangeDisplayed    : 2,\n    marginPagesDisplayed  : 3,\n    activeClassName       : \"selected\",\n    previousClassName     : \"previous\",\n    nextClassName         : \"next\",\n    previousLabel         : \"Previous\",\n    nextLabel             : \"Next\",\n    breakLabel            : \"...\",\n    disabledClassName     : \"disabled\",\n    disableInitialCallback: false\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: props.initialPage ? props.initialPage :\n                props.forcePage   ? props.forcePage :\n                0\n    };\n  }\n\n  componentDidMount() {\n    const { initialPage, disableInitialCallback } = this.props;\n    // Call the callback with the initialPage item:\n    if (typeof(initialPage) !== 'undefined' && !disableInitialCallback) {\n      this.callCallback(initialPage);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (typeof(nextProps.forcePage) !== 'undefined' && this.props.forcePage !== nextProps.forcePage) {\n      this.setState({selected: nextProps.forcePage});\n    }\n  }\n\n  handlePreviousPage = evt => {\n    const { selected } = this.state;\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n    if (selected > 0) {\n      this.handlePageSelected(selected - 1, evt);\n    }\n  };\n\n  handleNextPage = evt => {\n    const { selected } = this.state;\n    const { pageCount } = this.props;\n\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n    if (selected < pageCount - 1) {\n      this.handlePageSelected(selected + 1, evt);\n    }\n  };\n\n  handlePageSelected = (selected, evt) => {\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n\n    if (this.state.selected === selected) return;\n\n    this.setState({selected: selected});\n\n    // Call the callback with the new selected item:\n    this.callCallback(selected);\n  };\n\n  hrefBuilder(pageIndex) {\n    const { hrefBuilder, pageCount } = this.props;\n    if (hrefBuilder &&\n      pageIndex !== this.state.selected &&\n      pageIndex >= 0 &&\n      pageIndex < pageCount\n    ) {\n      return hrefBuilder(pageIndex + 1);\n    }\n  }\n\n  callCallback = (selectedItem) => {\n    if (typeof(this.props.onPageChange) !== \"undefined\" &&\n        typeof(this.props.onPageChange) === \"function\") {\n      this.props.onPageChange({selected: selectedItem});\n    }\n  };\n\n  getPageElement(index) {\n    const { selected } = this.state;\n    const {\n      pageClassName,\n      pageLinkClassName,\n      activeClassName,\n      extraAriaContext\n    } = this.props;\n\n    return <PageView\n      onClick={this.handlePageSelected.bind(null, index)}\n      selected={selected === index}\n      pageClassName={pageClassName}\n      pageLinkClassName={pageLinkClassName}\n      activeClassName={activeClassName}\n      extraAriaContext={extraAriaContext}\n      href={this.hrefBuilder(index)}\n      page={index + 1} />\n  }\n\n  pagination = () => {\n    let items = {};\n    const {\n      pageRangeDisplayed,\n      pageCount,\n      marginPagesDisplayed,\n      breakLabel,\n      breakClassName\n    } = this.props;\n\n    const { selected } = this.state;\n\n    if (pageCount <= pageRangeDisplayed) {\n\n      for (let index = 0; index < pageCount; index++) {\n        items['key' + index] = this.getPageElement(index);\n      }\n\n    } else {\n\n      let leftSide  = (pageRangeDisplayed / 2);\n      let rightSide = (pageRangeDisplayed - leftSide);\n\n      if (selected > pageCount - pageRangeDisplayed / 2) {\n        rightSide = pageCount - selected;\n        leftSide  = pageRangeDisplayed - rightSide;\n      }\n      else if (selected < pageRangeDisplayed / 2) {\n        leftSide  = selected;\n        rightSide = pageRangeDisplayed - leftSide;\n      }\n\n      let index;\n      let page;\n      let breakView;\n      let createPageView = (index) => this.getPageElement(index);\n\n      for (index = 0; index < pageCount; index++) {\n\n        page = index + 1;\n\n        if (page <= marginPagesDisplayed) {\n          items['key' + index] = createPageView(index);\n          continue;\n        }\n\n        if (page > pageCount - marginPagesDisplayed) {\n          items['key' + index] = createPageView(index);\n          continue;\n        }\n\n        if ((index >= selected - leftSide) && (index <= selected + rightSide)) {\n          items['key' + index] = createPageView(index);\n          continue;\n        }\n\n        let keys            = Object.keys(items);\n        let breakLabelKey   = keys[keys.length - 1];\n        let breakLabelValue = items[breakLabelKey];\n\n        if (breakLabel && breakLabelValue !== breakView) {\n          breakView = (\n            <BreakView\n              breakLabel={breakLabel}\n              breakClassName={breakClassName}\n            />\n          );\n\n          items['key' + index] = breakView;\n        }\n      }\n    }\n\n    return items;\n  };\n\n  render() {\n    const {\n      disabledClassName,\n      previousClassName,\n      nextClassName,\n      pageCount,\n      containerClassName,\n      previousLinkClassName,\n      previousLabel,\n      nextLinkClassName,\n      nextLabel\n    } = this.props;\n\n    const { selected } = this.state;\n    \n    let disabled = disabledClassName;\n    const previousClasses = classNames(previousClassName,\n                                       {[disabled]: selected === 0});\n\n    const nextClasses = classNames(nextClassName,\n                                   {[disabled]: selected === pageCount - 1});\n\n    return (\n      <ul className={containerClassName}>\n        <li className={previousClasses}>\n          <a onClick={this.handlePreviousPage}\n             className={previousLinkClassName}\n             href={this.hrefBuilder(selected - 1)}\n             tabIndex=\"0\"\n             onKeyPress={this.handlePreviousPage}>\n            {previousLabel}\n          </a>\n        </li>\n\n        {createFragment(this.pagination())}\n\n        <li className={nextClasses}>\n          <a onClick={this.handleNextPage}\n             className={nextLinkClassName}\n             href={this.hrefBuilder(selected + 1)}\n             tabIndex=\"0\"\n             onKeyPress={this.handleNextPage}>\n            {nextLabel}\n          </a>\n        </li>\n      </ul>\n    );\n  }\n};\n"]}